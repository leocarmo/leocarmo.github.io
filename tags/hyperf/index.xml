<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hyperf on leocarmo.dev</title><link>/tags/hyperf/</link><description>Recent content in hyperf on leocarmo.dev</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>leocarmo.dev</copyright><lastBuildDate>Thu, 15 Jul 2021 19:30:00 -0300</lastBuildDate><atom:link href="/tags/hyperf/index.xml" rel="self" type="application/rss+xml"/><item><title>Hyperf - PHP Coroutine Framework baseado em Swoole</title><link>/hyperf-php-coroutine-framework-baseado-em-swoole/</link><pubDate>Thu, 15 Jul 2021 19:30:00 -0300</pubDate><guid>/hyperf-php-coroutine-framework-baseado-em-swoole/</guid><description>Durante muito tempo que estudei sobre Swoole, eu sempre fazia as coisas &amp;ldquo;do zero&amp;rdquo; para tentar entender a fundo sobre ele. Cheguei a pesquisar alguns frameworks baseados nele, mas n√£o encontrei nenhum que tenha me chamado a aten√ß√£o. Ent√£o acabei seguindo meus estudos por conta mesmo, at√© agora.
Quando conheci o Hyperf n√£o imaginei o quanto ele era incr√≠vel at√© come√ßar a descobrir tudo que ele poderia me entregar. Praticamente todos os desafios que eu estava tendo para implementar do zero com Swoole, ele resolveu.</description><content>&lt;p>Durante muito tempo que estudei sobre &lt;a href="https://www.swoole.co.uk/">Swoole&lt;/a>, eu sempre fazia as coisas &amp;ldquo;do zero&amp;rdquo; para tentar entender a fundo sobre ele. Cheguei a pesquisar alguns frameworks baseados nele, mas n√£o encontrei nenhum que tenha me chamado a aten√ß√£o. Ent√£o acabei seguindo meus estudos por conta mesmo, at√© agora.&lt;/p>
&lt;p>Quando conheci o &lt;a href="https://github.com/hyperf/hyperf">Hyperf&lt;/a> n√£o imaginei o quanto ele era incr√≠vel at√© come√ßar a descobrir tudo que ele poderia me entregar. Praticamente todos os desafios que eu estava tendo para implementar do zero com Swoole, ele resolveu.&lt;/p>
&lt;p>Pode at√© parecer √≥timo ter tudo pronto, mas do que adianta ter um carro de f√≥rmula 1 se voc√™ n√£o souber dirigir? Ent√£o n√£o √© t√£o simples assim. √â preciso ter uma base de Swoole, programa√ß√£o concorrente, aplica√ß√£o stateful, etc., para conseguir extrair todo o poder que ele pode te dar.&lt;/p>
&lt;p>A ideia aqui √© te ajudar com os primeiros passos e ter um projeto m√≠nimo rodando, pois, s√≥ de utilizar o Hyperf como framework, voc√™ j√° conseguir√° sentir uma diferen√ßa absurda em performance.&lt;/p>
&lt;p>A documenta√ß√£o √© bacana, aborda bastante coisa e tem v√°rios exemplos, ent√£o vou passar por alguns t√≥picos e ir referenciando tudo aqui. Alguns conte√∫dos da documenta√ß√£o ainda est√£o em chin√™s, mas est√£o sendo traduzidos, enquanto isso, √© s√≥ traduzir que da tudo certo!&lt;/p>
&lt;p>Minha miss√£o aqui √©:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Te incentivar a construir as suas pr√≥ximas aplica√ß√µes utilizando Hyperf e Swoole.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>Ent√£o, bora l√°!&lt;/p>
&lt;p>T√≥picos:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#1-o-que-e">O que √©?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#2-instalacao">Instala√ß√£o&lt;/a>&lt;/li>
&lt;li>&lt;a href="#3-hot-reload">Hot Reload&lt;/a>&lt;/li>
&lt;li>&lt;a href="#4-estrutura">Estrutura&lt;/a>&lt;/li>
&lt;li>&lt;a href="#5-melhorando-o-ambiente">Melhorando o ambiente&lt;/a>&lt;/li>
&lt;li>&lt;a href="#6-database">Database&lt;/a>&lt;/li>
&lt;li>&lt;a href="#7-rotas-e-controllers">Rotas e Controllers&lt;/a>&lt;/li>
&lt;li>&lt;a href="#8-parallel">Parallel&lt;/a>&lt;/li>
&lt;li>&lt;a href="#9-benchmark">Benchmark&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="1-o-que-√©">1. O que √©?&lt;/h2>
&lt;p>O Hyperf √© um framework de alto desempenho e altamente flex√≠vel baseado em Swoole 4.5+ com &lt;code>PHP CLI&lt;/code>. Ele possui um servidor de corrotina integrado com diversos componentes comumente usados.&lt;/p>
&lt;p>Durante cerca de meio ano, o Hyperf foi testado em diversas companhias pelo mundo, ap√≥s √≥timos resultados, ele foi liberado para a comunidade em 20/06/2019.&lt;/p>
&lt;blockquote>
&lt;p>Os dois trechos acima foram retirados e traduzidos da &lt;a href="https://hyperf.wiki/2.1/#/en/README">documenta√ß√£o oficial&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Caso voc√™ n√£o conhe√ßa o Swoole PHP, recomendo dar uma olhada antes, pois vou assumir que voc√™ j√° conhece a forma com que ele funciona, j√° que o Hyperf √© baseado nele.&lt;/p>
&lt;blockquote>
&lt;p>Algumas recomenda√ß√µes de leitura para que voc√™ conhe√ßa e aprenda mais sobre Swoole:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://www.swoole.co.uk/docs/">O que √© Swoole&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.swoole.co.uk/how-it-works">Como Swoole funciona&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.linkedin.com/pulse/websocket-em-php-sim-%C3%A9-poss%C3%ADvel-ronie-neubauer/">Websocket em PHP com Swoole&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com.br/Mastering-Swoole-PHP-performance-concurrent-ebook/dp/B0881B227S">Livro Mastering Swoole PHP&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://diegoborgs.com.br/blog/mastering-swoole-php-parte-i-introdu%C3%A7%C3%A3o">S√©rie de resumo do Livro&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Uma coisa bem interessante, √© que o Hyperf √© muito similar ao &lt;a href="https://laravel.com/">Laravel&lt;/a>, ent√£o se voc√™ j√° trabalhou com Laravel, vai se adaptar muito bem ao Hyperf.&lt;/p>
&lt;p>Por ser baseado em Swoole, ele roda em cima do &lt;code>PHP CLI&lt;/code>, sendo stateful, e √© extremamente perform√°tico comparado ao &amp;ldquo;PHP tradicional&amp;rdquo;, utilizado via &lt;code>php-fpm&lt;/code>, e tamb√©m comparado a outras linguagens. üëÄ&lt;/p>
&lt;p>A proposta do Hyperf foi trazer todas as features do Swoole de forma simples para a comunidade, fazendo com que n√£o fosse preciso implementar tudo do zero. Grandes exemplos s√£o as pools de conex√µes, servidor HTTP, TCP, gRPC, &lt;a href="https://hyperf.wiki/2.1/#/en/README">entre outros&lt;/a>.&lt;/p>
&lt;p>Para exemplificar como funciona, ao utilizar o client pronto de Redis do Hyperf, voc√™ j√° tem uma pool criada por baixo com o client de Redis do Swoole, o que j√° ajuda muito na hora de fazer um projeto. A mesma coisa para o Eloquent ORM, ao utiliza-lo no Hyperf, por baixo j√° est√° tudo resolvido.&lt;/p>
&lt;blockquote>
&lt;p>Ou seja, n√£o tem motivos para n√£o achar isso incr√≠vel &amp;lt;3&lt;/p>
&lt;/blockquote>
&lt;p>Para entender o &lt;a href="https://hyperf.wiki/2.1/#/en/lifecycle">Lifecycle do Hyperf&lt;/a>, √© muito importante entender o &lt;a href="https://www.swoole.co.uk/docs/modules/swoole-http-server-doc">Lifecycle do Swoole&lt;/a>. Como o Swoole √© executado via &lt;code>PHP CLI&lt;/code>, o Hyperf se inicia tamb√©m via &lt;code>PHP CLI&lt;/code>, utilizando o &lt;a href="https://github.com/symfony/console">symfony/console&lt;/a> como &lt;code>command&lt;/code>.&lt;/p>
&lt;hr>
&lt;h2 id="2-instala√ß√£o">2. Instala√ß√£o&lt;/h2>
&lt;p>A maneira mais f√°cil de iniciar √© utilizando Docker, como em tudo rs. Com isso, voc√™ n√£o precisa se preocupar com a vers√£o do PHP, da extens√£o do Swoole na sua m√°quina, etc.&lt;/p>
&lt;p>Primeiro, crie uma pasta para iniciar o projeto:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">mkdir hyperf-skeleton &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> cd hyperf-skeleton
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Inicie o container mapeando o diret√≥rio que criamos como um volume para receber o projeto:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker run -v &lt;span style="color:#e6db74">${&lt;/span>PWD&lt;span style="color:#e6db74">}&lt;/span>:/app -p 9501:9501 -it --entrypoint /bin/sh hyperf/hyperf:7.4-alpine-v3.11-swoole
&lt;/code>&lt;/pre>&lt;/div>&lt;p>J√° dentro do container, instale o Hyperf na pasta &lt;code>app&lt;/code> que mapeamos anteriormente. O framework √© bastante modular, ent√£o ele vai perguntar se voc√™ quer utilizar algumas coisas, inicialmente, escolha todas as op√ß√µes padr√£o que j√° vai nos atender.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">composer create-project hyperf/hyperf-skeleton app
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Caso voc√™ queira iniciar esse projeto novamente de maneira mais f√°cil e j√° cair na raiz do projeto, crie o arquivo do &lt;code>docker-compose.yaml&lt;/code> com o seguinte conte√∫do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">version: &lt;span style="color:#e6db74">&amp;#39;3.9&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>services:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> hyperf-skeleton:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> container_name: hyperf-skeleton&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> image: hyperf/hyperf:7.4-alpine-v3.11-swoole&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> working_dir: /app&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> entrypoint: sh&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> volumes:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - ./:/app&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> ports:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - 9501:9501&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sobre o &lt;code>entrypoint&lt;/code> ser direto o &lt;code>sh&lt;/code> e n√£o o start do projeto, veremos mais tarde o motivo disso. Depois disso, para iniciar o container basta usar o seguinte comando:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker compose run --rm --service-ports hyperf-skeleton
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Agora √© s√≥ iniciar o webserver:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">php bin/hyperf.php start
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sua aplica√ß√£o est√° pronta para responder em: &lt;a href="http://0.0.0.0:9501">http://0.0.0.0:9501&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;method&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;message&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello Hyperf.&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Mais detalhes na &lt;a href="https://hyperf.wiki/2.1/#/en/quick-start/install">documenta√ß√£o oficial&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="3-hot-reload">3. Hot Reload&lt;/h2>
&lt;p>Como j√° vimos que o Swoole √© executado via &lt;code>PHP CLI&lt;/code>, em ambiente de desenvolvimento isso pode ser ruim, pois podemos perder muito tempo parando e iniciando o servidor. Bom, felizmente o Hyperf resolveu isso de forma f√°cil via o componente &lt;a href="https://hyperf.wiki/2.1/#/en/watcher">Watcher&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Importante: n√£o utilize esse componente em ambiente produtivo, ele √© destinado ao ambiente de desenvolvimento!&lt;/p>
&lt;/blockquote>
&lt;p>Primeiro precisamos instalar esse modulo no nosso projeto:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">composer require hyperf/watcher --dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Publicar o arquivo de configura√ß√µes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">php bin/hyperf.php vendor:publish hyperf/watcher
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Um arquivo foi criado em: &lt;code>config/autoload/watcher.php&lt;/code>, nele voc√™ pode definir as configura√ß√µes que achar melhor, aqui vamos seguir com as que j√° est√£o l√° mesmo.&lt;/p>
&lt;p>Agora, para rodar nosso projeto em &lt;strong>ambiente de desenvolvimento&lt;/strong>, nosso comando passa a ser:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">php bin/hyperf.php server:watch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Assim, sempre que fizermos alguma altera√ß√£o no projeto, esse componente vai recarregar nosso c√≥digo automaticamente sem ser preciso reiniciar manualmente.&lt;/p>
&lt;p>&lt;img src="images/magic.gif" alt="magic.gif">&lt;/p>
&lt;hr>
&lt;h2 id="4-estrutura">4. Estrutura&lt;/h2>
&lt;p>A estrutura √© bem simples, como comentei √© bem similar ao Laravel, ent√£o n√£o tem muita complexidade. As principais pastas s√£o:&lt;/p>
&lt;ul>
&lt;li>Arquivo de start: &lt;code>bin/hyperf.php&lt;/code>&lt;/li>
&lt;li>Centro de configura√ß√µes: &lt;code>config/*&lt;/code>&lt;/li>
&lt;li>Rotas: &lt;code>config/routes.php&lt;/code>&lt;/li>
&lt;li>Server: &lt;code>config/autoload/server.php&lt;/code>&lt;/li>
&lt;li>Inje√ß√£o de depend√™ncias: &lt;code>config/autoload/dependencies.php&lt;/code>&lt;/li>
&lt;li>Design do projeto: &lt;code>config/autoload/devtool.php&lt;/code>&lt;/li>
&lt;li>Aplica√ß√£o: &lt;code>app/*&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Para conhecer mais sobre o centro de configura√ß√µes, acesse &lt;a href="https://hyperf.wiki/2.1/#/en/config-center">este link&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Eu queria destacar um dos itens acima que achei super interessante, o arquivo &lt;code>devtool.php&lt;/code>. Com ele √© poss√≠vel montar todo o design da sua arquitetura da forma que voc√™ achar melhor. Ou seja, em um √∫nico arquivo voc√™ consegue definir sua estrutura de pastas para utilizar &lt;a href="https://pt.stackoverflow.com/questions/19548/o-que-realmente-%C3%A9-ddd-e-quando-ele-se-aplica">DDD&lt;/a> com &lt;a href="https://medium.com/luizalabs/descomplicando-a-clean-architecture-cf4dfc4a1ac6">clean architecture&lt;/a>, &lt;a href="https://netflixtechblog.com/ready-for-changes-with-hexagonal-architecture-b315ec967749">hexagonal architecture&lt;/a>, ou qualquer outra que desejar, te dando muito poder de trabalhar da forma que preferir.&lt;/p>
&lt;hr>
&lt;h2 id="5-melhorando-o-ambiente">5. Melhorando o ambiente&lt;/h2>
&lt;p>Na pr√≥xima se√ß√£o, vamos iniciar com uma ideia b√°sica de CRUD. Mas antes, vamos fazer uma melhoria no nosso &lt;code>docker-compose.yaml&lt;/code> para ajudar no nosso desenvolvimento, adicionando o nosso banco de dados e o Redis (que vamos utilizar mais adiante).&lt;/p>
&lt;p>Atualize o arquivo &lt;code>docker-compose.yaml&lt;/code> para:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">version: &lt;span style="color:#e6db74">&amp;#39;3.9&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>services:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> hyperf-skeleton:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> container_name: hyperf-skeleton&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> image: hyperf/hyperf:7.4-alpine-v3.11-swoole&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> working_dir: /app&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> entrypoint: &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;php&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;bin/hyperf.php&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;server:watch&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> volumes:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - ./:/app&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> ports:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - 9501:9501&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> depends_on:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - hyperf-skeleton-mariadb&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - hyperf-skeleton-redis&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> hyperf-skeleton-mariadb:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> container_name: hyperf-skeleton-mariadb&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> image: mariadb:latest&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> volumes:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - ./.docker/mariadb:/var/lib/mysql&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> ports:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - 3306:3306&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> environment:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> MYSQL_ROOT_PASSWORD: &lt;span style="color:#e6db74">&amp;#34;secret&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> MYSQL_DATABASE: &lt;span style="color:#e6db74">&amp;#34;hyperf-skeleton&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> hyperf-skeleton-redis:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> container_name: hyperf-skeleton-redis&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> image: redis:latest&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> ports:&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> - 6379:6379&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Agora para iniciar nosso projeto completo basta rodar o seguinte comando:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker-compose up -d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E claro, para remover tudo:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker-compose down
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="6-database">6. Database&lt;/h2>
&lt;blockquote>
&lt;p>Caso queira entender um pouco mais sobre o que vamos utilizar agora no Hyperf, acesse a documenta√ß√£o oficial e veja sobre: &lt;a href="https://hyperf.wiki/2.1/#/en/db/quick-start">Database&lt;/a>, &lt;a href="https://hyperf.wiki/2.1/#/en/db/model">Model&lt;/a> e &lt;a href="https://hyperf.wiki/2.1/#/en/db/migration">Migration&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Dica: evite copiar e colar o c√≥digo, tente escrever tudo, assim seu aprendizado ser√° muito maior (:&lt;/p>
&lt;/blockquote>
&lt;p>Com nosso banco de dados rodando, vamos criar uma migration para a tabela de usu√°rios:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker container exec -it hyperf-skeleton php bin/hyperf.php gen:migration create_users_table
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Com o nosso arquivo gerado em &lt;code>migrations/*_create_users_table.php&lt;/code>, vamos inserir os campos b√°sicos para serem criados:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#a6e22e">Schema&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;users&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">Blueprint&lt;/span> $table) {
$table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">uuid&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">primary&lt;/span>();
$table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">string&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>);
$table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">string&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;email&amp;#39;&lt;/span>);
$table&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">timestamps&lt;/span>();
});
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Sim, vamos usar &lt;code>uuid&lt;/code> como chave primaria, espero que em todos os seus projetos voc√™ tamb√©m esteja usando üëÄ, se ainda n√£o estiver, da uma olhada &lt;a href="https://mareks-082.medium.com/auto-increment-keys-vs-uuid-a74d81f7476a">aqui&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>O pr√≥ximo passo √© criar o nosso modelo, ent√£o na pasta &lt;code>App/Model&lt;/code> vamos criar o nosso &lt;code>User&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> &lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">App\Model&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Hyperf\DbConnection\Model\Model&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @property $id
&lt;/span>&lt;span style="color:#e6db74"> * @property $name
&lt;/span>&lt;span style="color:#e6db74"> * @property $email
&lt;/span>&lt;span style="color:#e6db74"> * @property $created_at
&lt;/span>&lt;span style="color:#e6db74"> * @property $updated_at
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Model&lt;/span>
{
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @var string
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> $keyType &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * @var bool
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> $incrementing &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;span style="color:#e6db74">/**
&lt;/span>&lt;span style="color:#e6db74"> * The attributes that are mass assignable.
&lt;/span>&lt;span style="color:#e6db74"> *
&lt;/span>&lt;span style="color:#e6db74"> * @var array
&lt;/span>&lt;span style="color:#e6db74"> */&lt;/span>
&lt;span style="color:#66d9ef">protected&lt;/span> $fillable &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;email&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;created_at&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;updated_at&amp;#39;&lt;/span>];
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Antes de rodar a nossa migration, normalmente √© preciso verificar se os par√¢metros de conex√£o do banco est√£o devidamente configurados. Por√©m, no nosso caso vamos manter tudo como est√°, mas vale a pena dar uma olhada no conte√∫do do arquivo, ele fica em &lt;code>config/autoload/databases.php&lt;/code>.&lt;/p>
&lt;p>O que vamos precisar fazer √© trocar as &lt;code>envs&lt;/code> no arquivo &lt;code>.env&lt;/code> para realizar a conex√£o ao nosso container. S√≥ vamos precisar alterar as seguintes &lt;code>envs&lt;/code>:&lt;/p>
&lt;pre>&lt;code>DB_HOST=hyperf-skeleton-mariadb
DB_DATABASE=hyperf-skeleton
DB_USERNAME=root
DB_PASSWORD=secret
&lt;/code>&lt;/pre>&lt;p>Agora √© s√≥ rodar a migration no container da aplica√ß√£o:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker container exec -it hyperf-skeleton php bin/hyperf.php migrate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Resultado de sucesso:&lt;/p>
&lt;pre>&lt;code>[INFO] Migration table created successfully.
Migrating: *_create_users_table
Migrated: *_create_users_table
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Importante, o hot reload n√£o funciona para recarregar variaveis de ambiente, ent√£o √© preciso dar um restart manual no container.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="7-rotas-e-controllers">7. Rotas e Controllers&lt;/h2>
&lt;blockquote>
&lt;p>Caso queira entender um pouco mais sobre o que vamos utilizar agora no Hyperf, acesse a documenta√ß√£o oficial e veja sobre: &lt;a href="https://hyperf.wiki/2.1/#/en/controller">Controller&lt;/a> e &lt;a href="https://hyperf.wiki/2.1/#/en/router">Router&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Agora vamos criar o nosso &lt;code>UserController&lt;/code>, na pasta &lt;code>app/Controller&lt;/code> inicialmente vazio:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> &lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">App\Controller&lt;/span>;
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserController&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">AbstractController&lt;/span>
{
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depois, precisamos definir nossas rotas. Ent√£o faremos algo assim:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">App\Controller\UserController&lt;/span>;
&lt;span style="color:#a6e22e">Router&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">addGroup&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/users&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#a6e22e">Router&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, [&lt;span style="color:#a6e22e">UserController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;index&amp;#39;&lt;/span>]);
&lt;span style="color:#a6e22e">Router&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/{id}&amp;#39;&lt;/span>, [&lt;span style="color:#a6e22e">UserController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;show&amp;#39;&lt;/span>]);
&lt;span style="color:#a6e22e">Router&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">post&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, [&lt;span style="color:#a6e22e">UserController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;store&amp;#39;&lt;/span>]);
&lt;span style="color:#a6e22e">Router&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">delete&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/{id}&amp;#39;&lt;/span>, [&lt;span style="color:#a6e22e">UserController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;delete&amp;#39;&lt;/span>]);
});
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Voltando para o nosso &lt;code>Controller&lt;/code>, vamos criar os m√©todos conforme nossas rotas j√° utilizando a classe &lt;code>User&lt;/code> e fazendo as devidas opera√ß√µes com o ORM:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> &lt;span style="color:#66d9ef">declare&lt;/span>(&lt;span style="color:#a6e22e">strict_types&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;span style="color:#66d9ef">namespace&lt;/span> &lt;span style="color:#a6e22e">App\Controller&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">App\Model\User&lt;/span>;
&lt;span style="color:#66d9ef">use&lt;/span> &lt;span style="color:#a6e22e">Hyperf\HttpServer\Contract\RequestInterface&lt;/span>;
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UserController&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">AbstractController&lt;/span>
{
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>(&lt;span style="color:#a6e22e">RequestInterface&lt;/span> $request)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>();
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">show&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">find&lt;/span>($id);
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>(&lt;span style="color:#a6e22e">RequestInterface&lt;/span> $request)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>($request&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">all&lt;/span>());
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">delete&lt;/span>(&lt;span style="color:#a6e22e">string&lt;/span> $id)
{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">destroy&lt;/span>($id);
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Essa √© uma estrutura extremamente b√°sica, e com alguns problemas&amp;hellip; Contudo, a ideia n√£o √© ensinar tudo aqui, e sim te direcionar para explorar e construir coisas interessantes. Para isso, vou deixar alguns links aqui para voc√™ melhorar este c√≥digo:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://hyperf.wiki/2.1/#/en/db/paginator">Paginator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hyperf.wiki/2.1/#/en/validation">Validation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hyperf.wiki/2.1/#/en/cache">Cache&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hyperf.wiki/2.1/#/en/response">Response&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hyperf.wiki/2.1/#/en/event">Event Dispatcher&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Todos os itens acima t√™m uma boa documenta√ß√£o e com bons exemplos. Voc√™ consegue implementar tudo isso nesse simples CRUD para exercitar os recursos do Hyperf.&lt;/p>
&lt;p>Ainda tenho uma ideia b√¥nus: crie uma interface e uma implementa√ß√£o para a Repository Pattern refatorando este c√≥digo e injete via &lt;a href="https://hyperf.wiki/2.1/#/en/di">Dependency Injection&lt;/a>, tenho certeza que ser√° bacana entender este fluxo.&lt;/p>
&lt;p>E claro, n√£o esque√ßa de criar testes. O Hyperf criou o &lt;code>co-phpunit&lt;/code>, que √© basicamente o &lt;code>phpunit&lt;/code> com corrotinas. Maneiro de mais n√©? Para conhecer mais acesse a &lt;a href="https://hyperf.wiki/2.1/#/en/testing">documenta√ß√£o&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="8-parallel">8. Parallel&lt;/h2>
&lt;p>Outra coisa que achei muito bacana, foi a implementa√ß√£o que o Hyperf fez do gerenciamento via channels de corrotinas usando wait groups e handle de exceptions. Basicamente ele encapsulou toda essa implementa√ß√£o na classe &lt;code>Hyperf\Utils\Parallel&lt;/code>.&lt;/p>
&lt;p>Usando o exemplo do que fizemos acima, para criar v√°rios usu√°rios em paralelo e s√≥ continuar depois que todos finalizarem, podemos fazer assim no nosso &lt;code>UserController@store&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">store&lt;/span>(&lt;span style="color:#a6e22e">RequestInterface&lt;/span> $request)
{
$parallel &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Parallel&lt;/span>();
&lt;span style="color:#66d9ef">foreach&lt;/span> ($request&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;users&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> $user) {
$parallel&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>(
&lt;span style="color:#66d9ef">function&lt;/span> () &lt;span style="color:#66d9ef">use&lt;/span> ($user) {
&lt;span style="color:#a6e22e">User&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#a6e22e">create&lt;/span>($user);
},
$user[&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>]
);
}
&lt;span style="color:#66d9ef">return&lt;/span> $parallel&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">wait&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Claro que n√£o fariamos esta implementa√ß√£o no mundo real, √© apenas um exemplo rsrs.&lt;/p>
&lt;/blockquote>
&lt;p>√â importante destacar que ao disparar uma corrotina, tudo que for utilizado de I/O dentro do seu contexto precisa ser compat√≠vel com corrotinas, caso contr√°rio seu c√≥digo ser√° bloqueante.&lt;/p>
&lt;p>Todos os componentes do Hyperf j√° s√£o compat√≠veis, ent√£o voc√™ pode utilizar sem problemas, tenha aten√ß√£o apenas com bibliotecas como a do &lt;code>mongodb&lt;/code>, que, at√© o momento n√£o tem suporte dos &lt;a href="https://www.swoole.co.uk/docs/modules/swoole-runtime-flags">Hooks do Swoole&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="9-benchmark">9. Benchmark&lt;/h2>
&lt;p>Falamos muito sobre performance, diferen√ßas entre o Swoole e o &amp;ldquo;PHP Tradicional&amp;rdquo;, mas agora vamos aos n√∫meros!&lt;/p>
&lt;p>Realizei um teste na minha pr√≥pria m√°quina, ent√£o os resultados podem ser diferentes de um servidor em produ√ß√£o ou da sua m√°quina. N√£o vamos focar nos n√∫meros absolutos, vamos focar nas refer√™ncias entre um e outro, pois mesmo mudando de ambiente, provavelmente ser√£o mantidas similares.&lt;/p>
&lt;blockquote>
&lt;p>Para realizar os testes utilizei o &lt;a href="https://github.com/wg/wrk">wrk&lt;/a> na rota de retorno base dos frameworks.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Laravel 8 com PHP 7.4 (93 rq/s)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Running 10s test @ http://0.0.0.0:8000
12 threads and 400 connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 550.01ms 335.24ms 1.12s 63.01%
Req/Sec 12.38 8.80 70.00 84.72%
938 requests in 10.10s, 16.64MB read
Socket errors: connect 155, read 1214, write 12, timeout 0
Requests/sec: 92.83
Transfer/sec: 1.65MB
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Lumen 8 com PHP 7.4 (279 rq/s)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Running 10s test @ http://0.0.0.0:8000
12 threads and 400 connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 108.93ms 41.13ms 193.70ms 76.31%
Req/Sec 73.96 40.36 184.00 69.49%
2820 requests in 10.10s, 751.82KB read
Socket errors: connect 157, read 3987, write 4, timeout 0
Requests/sec: 279.10
Transfer/sec: 74.41KB
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Laravel Octane com PHP 8.0 e Swoole (1.273 rq/s)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Running 10s test @ http://0.0.0.0:8000
12 threads and 400 connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 110.06ms 190.13ms 1.65s 84.78%
Req/Sec 118.57 96.64 550.00 69.97%
12796 requests in 10.05s, 13.09MB read
Socket errors: connect 157, read 101, write 4, timeout 0
Requests/sec: 1273.75
Transfer/sec: 1.30MB
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Hyperf 2.1 com PHP 7.4 (90.799 rq/s)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Running 10s test @ http://0.0.0.0:9502
12 threads and 400 connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 628.86us 2.28ms 127.72ms 97.39%
Req/Sec 20.96k 12.14k 62.60k 69.07%
914415 requests in 10.07s, 165.69MB read
Socket errors: connect 155, read 84, write 0, timeout 2
Requests/sec: 90799.66
Transfer/sec: 16.45MB
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Swoole puro com PHP 8.0 (159.581 rq/s)&lt;/strong>&lt;/p>
&lt;pre>&lt;code>Running 10s test @ http://0.0.0.0:9501
12 threads and 400 connections
Thread Stats Avg Stdev Max +/- Stdev
Latency 1.47ms 431.57us 29.87ms 97.10%
Req/Sec 13.37k 5.49k 25.36k 59.74%
1612224 requests in 10.10s, 267.53MB read
Socket errors: connect 157, read 107, write 0, timeout 0
Requests/sec: 159581.95
Transfer/sec: 26.48MB
&lt;/code>&lt;/pre>&lt;p>Compara√ß√µes usando o mais lento como refer√™ncia:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Framework&lt;/th>
&lt;th>rq/s&lt;/th>
&lt;th>ref.&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Laravel&lt;/td>
&lt;td>92&lt;/td>
&lt;td>x1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lumen&lt;/td>
&lt;td>279&lt;/td>
&lt;td>+3x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Laravel Octane&lt;/td>
&lt;td>1.273&lt;/td>
&lt;td>+13x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hyperf&lt;/td>
&lt;td>90.799&lt;/td>
&lt;td>+986x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Swoole puro&lt;/td>
&lt;td>159.581&lt;/td>
&lt;td>+1.734x&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Ou seja, o Hyperf √© mais de 986 vezes mais r√°pido do que o Laravel e o Swoole puro 1.734, isso sem considerar a lat√™ncia, que tamb√©m teve uma diferen√ßa enorme. Incr√≠vel n√©? Claro, este √© um benchmark realizado localmente em uma rota extremamente simples, mas a diferen√ßa realmente √© insana, mesmo em outros ambientes.&lt;/p>
&lt;hr>
&lt;p>O resultado deste projeto est√° no meu github:&lt;/p>
&lt;p>&lt;a href="https://github.com/leocarmo/hyperf-skeleton">https://github.com/leocarmo/hyperf-skeleton&lt;/a>&lt;/p>
&lt;p>Bom, acredito que passamos pelo b√°sico do Hyperf, agora voc√™ j√° consegue explorar tudo que ele pode fornecer com este ambiente que iniciamos.&lt;/p>
&lt;p>Pretendo escrever novos artigos aprofundando mais em assuntos espec√≠ficos, principalmente sobre os diversos clients que ele implementa e sobre as &lt;a href="https://hyperf.wiki/2.1/#/en/pool">connections pools&lt;/a>.&lt;/p>
&lt;p>Espero que voc√™ tenha gostado e que esse guia possa ter te ajudado. Apesar de algumas partes da documenta√ß√£o ainda n√£o ter sido traduzida, ela √© bem completa de exemplos, ent√£o da para implementar praticamente tudo que est√° dispon√≠vel.&lt;/p>
&lt;p>E a√≠, j√° conhecia o Hyperf? Me conta o que achou dele nos coment√°rios. (:&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>Agradecimento especial ao &lt;a href="https://www.linkedin.com/in/ronieneubauer/">@ronieneubauer&lt;/a> pela revis√£o.&lt;/p>
&lt;/blockquote></content></item></channel></rss>